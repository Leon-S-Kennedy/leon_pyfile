#numpy线性代数
import numpy as np
'''
函数	            描述
dot	            两个数组的点积，即元素对应相乘。
vdot	        两个向量的点积
inner	        两个数组的内积
matmul	        两个数组的矩阵积
determinant	    数组的行列式
solve	        求解线性矩阵方程
inv	            计算矩阵的乘法逆矩阵
'''

'''
numpy.dot() 对于两个一维的数组，计算的是这两个数组对应下标元素的乘积和(数学上称之为内积)；
            对于二维数组，计算的是两个数组的矩阵乘积；
            
'''
a=np.array([[12,21],[12,21]])
b=np.array([[21,12],[21,12]])
print(np.dot(a,b))#对于矩阵就是矩阵的乘法

#numpy.vdot() 函数是两个向量的点积。 如果第一个参数是复数，那么它的共轭复数会用于计算。 如果参数是多维数组，它会被展开。
print(np.vdot(a,b))

#numpy.inner() 函数返回一维数组的向量内积。对于更高的维度，它返回最后一个轴上的和的乘积。
c=np.array([[1,2,3],[1,2,3],[1,2,3]])
d=np.array([[3,2,1],[3,2,1],[3,2,1]])
print(np.inner(c,d))
'''
numpy.matmul 函数返回两个数组的矩阵乘积。
虽然它返回二维数组的正常乘积，但如果任一参数的维数大于2，则将其视为存在于最后两个索引的矩阵的栈，并进行相应广播。
另一方面，如果任一参数是一维数组，则通过在其维度上附加 1 来将其提升为矩阵，并在乘法之后被去除。
对于二维数组，它就是矩阵乘法：
'''
print(np.matmul(a,b))
print(np.matmul(b,a))
print(a*b)#这个是数组对应元素相乘
print('-------------------------------------------------------------')
#numpy.linalg.det() 函数计算输入矩阵的行列式。
print(np.linalg.det(a))

#numpy.linalg.solve() 函数给出了矩阵形式的线性方程的解。
print(np.linalg.solve([[1,1,1],[0,2,5],[2,5,-1]],[6,-4,27]))
print('-----------------------------------------------------------')

#numpy.linalg.inv() 函数计算矩阵的逆矩阵。
e=np.array([[1,2],[3,4]])
f=np.linalg.inv(e)
print(f)
print(np.matmul(e,f))



